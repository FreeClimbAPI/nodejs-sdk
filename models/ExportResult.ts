/**
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ExportResourceType } from "./../models/ExportResourceType";
import { ExportResultOutput } from "./../models/ExportResultOutput";
import { ExportStatus } from "./../models/ExportStatus";
import { HttpFile } from "../http/http";

interface AttributeType {
  name: string;
  baseName: string;
  type: string;
  format: string;
  defaultValue: any;
}
interface ArgumentsType {
  accountId: string;
  uri: string;
  dateCreated: string;
  dateUpdated: string;
  revision: number;
  exportId: string;
  status: ExportStatus;
  size: number;
  resourceType: ExportResourceType;
  query: any;
  format: Array<string>;
  output: ExportResultOutput;
}
export class ExportResult {
  /**
   * String that uniquely identifies this account resource.
   */
  "accountId": string;
  "uri": string;
  "dateCreated": string;
  "dateUpdated": string;
  "revision": number;
  /**
   * String that uniquely identifies this export resource
   */
  "exportId": string;
  "status": ExportStatus;
  "size": number;
  "resourceType": ExportResourceType;
  /**
   * Query params used to filter exported documents
   */
  "query": any;
  /**
   * Desired fields of exported documents
   */
  "format": Array<string>;
  "output": ExportResultOutput;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: AttributeType[] = [
    {
      name: "accountId",
      baseName: "accountId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "uri",
      baseName: "uri",
      type: "string",
      format: "uri-reference",

      defaultValue: undefined,
    },
    {
      name: "dateCreated",
      baseName: "dateCreated",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "dateUpdated",
      baseName: "dateUpdated",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "revision",
      baseName: "revision",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "exportId",
      baseName: "exportId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "status",
      baseName: "status",
      type: "ExportStatus",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "size",
      baseName: "size",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "resourceType",
      baseName: "resourceType",
      type: "ExportResourceType",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "query",
      baseName: "query",
      type: "any",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "format",
      baseName: "format",
      type: "Array<string>",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "output",
      baseName: "output",
      type: "ExportResultOutput",
      format: "",

      defaultValue: undefined,
    },
  ];

  static getAttributeTypeMap(): AttributeType[] {
    return ExportResult.attributeTypeMap;
  }
  public constructor(args: ArgumentsType) {
    const assign = <T>(attribute: keyof ArgumentsType): T => {
      return (
        args.hasOwnProperty(attribute)
          ? args[attribute]
          : ExportResult.attributeTypeMap.find(
              (attr) => attr.name === attribute,
            )?.defaultValue
      ) as T;
    };
    this["accountId"] = assign<string>("accountId");
    this["uri"] = assign<string>("uri");
    this["dateCreated"] = assign<string>("dateCreated");
    this["dateUpdated"] = assign<string>("dateUpdated");
    this["revision"] = assign<number>("revision");
    this["exportId"] = assign<string>("exportId");
    this["status"] = assign<ExportStatus>("status");
    this["size"] = assign<number>("size");
    this["resourceType"] = assign<ExportResourceType>("resourceType");
    this["query"] = assign<any>("query");
    this["format"] = assign<Array<string>>("format");
    this["output"] = assign<ExportResultOutput>("output");
  }
}
