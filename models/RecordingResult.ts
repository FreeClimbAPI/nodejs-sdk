/**
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from "../http/http";

interface AttributeType {
  name: string;
  baseName: string;
  type: string;
  format: string;
  defaultValue: any;
}
interface ArgumentsType {
  uri?: string;
  dateCreated?: string;
  dateUpdated?: string;
  revision?: number;
  recordingId?: string;
  accountId?: string;
  callId?: string;
  durationSec?: number;
  conferenceId?: string;
}
export class RecordingResult {
  /**
   * The URI for this resource, relative to /apiserver.
   */
  "uri"?: string;
  /**
   * The date that this resource was created (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
   */
  "dateCreated"?: string;
  /**
   * The date that this resource was last updated (GMT) in RFC 1123 format (e.g., Mon, 15 Jun 2009 20:45:30 GMT).
   */
  "dateUpdated"?: string;
  /**
   * Revision count for the resource. This count is set to 1 on creation and is incremented every time it is updated.
   */
  "revision"?: number;
  /**
   * String that uniquely identifies this recording resource.
   */
  "recordingId"?: string;
  /**
   * ID of the account that created this recording.
   */
  "accountId"?: string;
  /**
   * ID of the Call that was recorded. If a Conference was recorded, this value is empty and the conferenceId property is populated.
   */
  "callId"?: string;
  /**
   * Length of the recording in seconds.
   */
  "durationSec"?: number;
  /**
   * ID of the Conference that was recorded. If a Call was recorded, this value is empty and the callId property is populated.
   */
  "conferenceId"?: string;

  static readonly discriminator: string | undefined = undefined;

  static readonly attributeTypeMap: AttributeType[] = [
    {
      name: "uri",
      baseName: "uri",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "dateCreated",
      baseName: "dateCreated",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "dateUpdated",
      baseName: "dateUpdated",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "revision",
      baseName: "revision",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "recordingId",
      baseName: "recordingId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "accountId",
      baseName: "accountId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "callId",
      baseName: "callId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "durationSec",
      baseName: "durationSec",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "conferenceId",
      baseName: "conferenceId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
  ];

  static getAttributeTypeMap(): AttributeType[] {
    return RecordingResult.attributeTypeMap;
  }
  public constructor(args: ArgumentsType) {
    const assign = <T>(attribute: keyof ArgumentsType): T => {
      return (args[attribute] ??
        RecordingResult.attributeTypeMap.find((attr) => attr.name === attribute)
          ?.defaultValue) as T;
    };
    if (args["uri"]) {
      this["uri"] = assign<string>("uri");
    }
    if (args["dateCreated"]) {
      this["dateCreated"] = assign<string>("dateCreated");
    }
    if (args["dateUpdated"]) {
      this["dateUpdated"] = assign<string>("dateUpdated");
    }
    if (args["revision"]) {
      this["revision"] = assign<number>("revision");
    }
    if (args["recordingId"]) {
      this["recordingId"] = assign<string>("recordingId");
    }
    if (args["accountId"]) {
      this["accountId"] = assign<string>("accountId");
    }
    if (args["callId"]) {
      this["callId"] = assign<string>("callId");
    }
    if (args["durationSec"]) {
      this["durationSec"] = assign<number>("durationSec");
    }
    if (args["conferenceId"]) {
      this["conferenceId"] = assign<string>("conferenceId");
    }
  }
}
