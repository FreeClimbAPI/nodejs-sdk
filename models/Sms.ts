/**
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AddToConference } from './AddToConference';
import { CreateConference } from './CreateConference';
import { Dequeue } from './Dequeue';
import { Enqueue } from './Enqueue';
import { GetDigits } from './GetDigits';
import { GetSpeech } from './GetSpeech';
import { Hangup } from './Hangup';
import { OutDial } from './OutDial';
import { Park } from './Park';
import { Pause } from './Pause';
import { PerclCommand } from './PerclCommand';
import { Play } from './Play';
import { PlayEarlyMedia } from './PlayEarlyMedia';
import { RecordUtterance } from './RecordUtterance';
import { Redirect } from './Redirect';
import { Reject } from './Reject';
import { RemoveFromConference } from './RemoveFromConference';
import { Say } from './Say';
import { SendDigits } from './SendDigits';
import { SetListen } from './SetListen';
import { SetTalk } from './SetTalk';
import { SmsAllOf } from './SmsAllOf';
import { StartRecordCall } from './StartRecordCall';
import { TerminateConference } from './TerminateConference';
import { TranscribeUtterance } from './TranscribeUtterance';
import { Unpark } from './Unpark';
import { HttpFile } from '../http/http';

/**
* The `Sms` command can be used to send an SMS message to a phone number during a phone call. International SMS is disabled by default.
*/

interface AttributeType {
    name: string
    baseName: string
    type: string
    format: string
    defaultValue: any
}
interface ArgumentsType {
    'to': string;
    'from': string;
    'text': string;
    'notificationUrl'?: string;
}
export class Sms extends PerclCommand {
    /**
    * E.164 representation of the phone number to which the message will be sent. Must be within FreeClimb's service area and E.164 formatting (e.g., +18003608245).
    */
    'to': string;
    /**
    * E.164 representation of the phone number to use as the sender. This must be an incoming phone number you have purchased from FreeClimb.
    */
    'from': string;
    /**
    * Text contained in the message (maximum 160 characters).
    */
    'text': string;
    /**
    * When the message changes status, this URL will be invoked using HTTP POST with the messageStatus parameters. This is a notification only; any PerCL returned will be ignored.
    */
    'notificationUrl'?: string;

    static readonly discriminator: string | undefined = "command";

    static readonly attributeTypeMap: AttributeType[] = [
        {
            "name": "to",
            "baseName": "to",
            "type": "string",
            "format": "",

            
            "defaultValue": undefined
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string",
            "format": "",

            
            "defaultValue": undefined
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string",
            "format": "",

            
            "defaultValue": undefined
        },
        {
            "name": "notificationUrl",
            "baseName": "notificationUrl",
            "type": "string",
            "format": "",

            
            "defaultValue": undefined
        }    ];

    static getAttributeTypeMap(): AttributeType[] {
        return super.getAttributeTypeMap().concat(Sms.attributeTypeMap);
    }

    public constructor(args: ArgumentsType) {
        super({ command: "Sms" });
        const preparedArgs = Sms.attributeTypeMap.reduce((acc: Partial<ArgumentsType>, attr: AttributeType) => {
            
            const val = args[attr.name as keyof ArgumentsType] ?? attr.defaultValue
            
            if (val !== undefined) {
                acc[attr.name as keyof ArgumentsType] = val
            }
            return acc
        }, {})
        Object.assign(this, preparedArgs)
    }
}

