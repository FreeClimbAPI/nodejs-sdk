/**
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CallDirection } from "./../models/CallDirection";
import { CallStatus } from "./../models/CallStatus";
import { GetSpeechReason } from "./../models/GetSpeechReason";
import { Webhook } from "./../models/Webhook";
import { HttpFile } from "../http/http";

/**
 * The GetSpeech command has completed and its actionUrl is being invoked. A PerCL response is expected, unless reason is hangup.
 */

interface AttributeType {
  name: string;
  baseName: string;
  type: string;
  format: string;
  defaultValue: any;
}
interface ArgumentsType {
  requestType?: string;
  callId?: string;
  accountId?: string;
  from?: string;
  to?: string;
  callStatus?: CallStatus;
  direction?: CallDirection;
  conferenceId?: string;
  queueId?: string;
  reason?: GetSpeechReason;
  recognitionResult?: string;
  confidence?: number;
  parentCallId?: string;
  completionReason?: string;
  completionCause?: string;
  mrcpCode?: number;
  mrcpDiagnostic?: string;
}
export class GetSpeechWebhook extends Webhook {
  /**
   * Context or reason why this request is being made. Will be getSpeech - The GetSpeech command has completed and its actionUrl is being invoked.
   */
  "requestType"?: string;
  /**
   * Unique ID for this Call, generated by FreeClimb.
   */
  "callId"?: string;
  /**
   * Account ID associated with your account.
   */
  "accountId"?: string;
  /**
   * Phone number of the party that initiated the Call (in E.164 format).
   */
  "from"?: string;
  /**
   * Phone number provisioned to you and to which this Call is directed (in E.164 format).
   */
  "to"?: string;
  "callStatus"?: CallStatus;
  "direction"?: CallDirection;
  /**
   * Unique ID of the Conference.
   */
  "conferenceId"?: string;
  /**
   * This is only populated if the request pertains to a Queue. Otherwise, it is set to null.
   */
  "queueId"?: string;
  "reason"?: GetSpeechReason;
  /**
   * Semantic content (either a string if speech was recognized or a digit if a digit was input instead of speech) returned from the entry or tag that was recognized within the grammar. The content will be replaced by \'xxxxx\' when privacyMode is set to true. This field is populated only if the reason field is set to recognition or digit.
   */
  "recognitionResult"?: string;
  /**
   * Level of confidence in the obtained result. This is a value in the range 0 to 100 â€“ with 0 being total lack of confidence and 100 being absolute certainty in the recognition. This field is populated only if the reason field is set to recognition.
   */
  "confidence"?: number;
  /**
   * ID of the Call that created this leg (child call).
   */
  "parentCallId"?: string;
  /**
   * Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.12 - speech recognition.
   */
  "completionReason"?: string;
  /**
   * Advanced diagnostic information if reason was error. See RFC 6787 section 9.4.11 - speech recognition.
   */
  "completionCause"?: string;
  /**
   * Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification.
   */
  "mrcpCode"?: number;
  /**
   * Advanced diagnostic information if reason was error. See RFC 6787 section 5.4 - MRCPv2 specification.
   */
  "mrcpDiagnostic"?: string;

  static readonly discriminator: string | undefined = "requestType";

  static readonly attributeTypeMap: AttributeType[] = [
    {
      name: "requestType",
      baseName: "requestType",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "callId",
      baseName: "callId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "accountId",
      baseName: "accountId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "from",
      baseName: "from",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "to",
      baseName: "to",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "callStatus",
      baseName: "callStatus",
      type: "CallStatus",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "direction",
      baseName: "direction",
      type: "CallDirection",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "conferenceId",
      baseName: "conferenceId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "queueId",
      baseName: "queueId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "reason",
      baseName: "reason",
      type: "GetSpeechReason",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "recognitionResult",
      baseName: "recognitionResult",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "confidence",
      baseName: "confidence",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "parentCallId",
      baseName: "parentCallId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "completionReason",
      baseName: "completionReason",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "completionCause",
      baseName: "completionCause",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "mrcpCode",
      baseName: "mrcpCode",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "mrcpDiagnostic",
      baseName: "mrcpDiagnostic",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
  ];

  static getAttributeTypeMap(): AttributeType[] {
    return super
      .getAttributeTypeMap()
      .concat(GetSpeechWebhook.attributeTypeMap);
  }
  public constructor(args: ArgumentsType) {
    super({ requestType: "getSpeech" });
    const assign = <T>(attribute: keyof ArgumentsType): T => {
      return (args[attribute] ??
        GetSpeechWebhook.attributeTypeMap.find(
          (attr) => attr.name === attribute,
        )?.defaultValue) as T;
    };
    if (args.hasOwnProperty("requestType")) {
      this["requestType"] = assign<string>("requestType");
    }
    if (args.hasOwnProperty("callId")) {
      this["callId"] = assign<string>("callId");
    }
    if (args.hasOwnProperty("accountId")) {
      this["accountId"] = assign<string>("accountId");
    }
    if (args.hasOwnProperty("from")) {
      this["from"] = assign<string>("from");
    }
    if (args.hasOwnProperty("to")) {
      this["to"] = assign<string>("to");
    }
    if (args.hasOwnProperty("callStatus")) {
      this["callStatus"] = assign<CallStatus>("callStatus");
    }
    if (args.hasOwnProperty("direction")) {
      this["direction"] = assign<CallDirection>("direction");
    }
    if (args.hasOwnProperty("conferenceId")) {
      this["conferenceId"] = assign<string>("conferenceId");
    }
    if (args.hasOwnProperty("queueId")) {
      this["queueId"] = assign<string>("queueId");
    }
    if (args.hasOwnProperty("reason")) {
      this["reason"] = assign<GetSpeechReason>("reason");
    }
    if (args.hasOwnProperty("recognitionResult")) {
      this["recognitionResult"] = assign<string>("recognitionResult");
    }
    if (args.hasOwnProperty("confidence")) {
      this["confidence"] = assign<number>("confidence");
    }
    if (args.hasOwnProperty("parentCallId")) {
      this["parentCallId"] = assign<string>("parentCallId");
    }
    if (args.hasOwnProperty("completionReason")) {
      this["completionReason"] = assign<string>("completionReason");
    }
    if (args.hasOwnProperty("completionCause")) {
      this["completionCause"] = assign<string>("completionCause");
    }
    if (args.hasOwnProperty("mrcpCode")) {
      this["mrcpCode"] = assign<number>("mrcpCode");
    }
    if (args.hasOwnProperty("mrcpDiagnostic")) {
      this["mrcpDiagnostic"] = assign<string>("mrcpDiagnostic");
    }
  }
  public static deserialize(payload: string): GetSpeechWebhook {
    return new GetSpeechWebhook(JSON.parse(payload));
  }
}
