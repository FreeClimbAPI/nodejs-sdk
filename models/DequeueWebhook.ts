/**
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CallDirection } from "./../models/CallDirection";
import { CallStatus } from "./../models/CallStatus";
import { Webhook } from "./../models/Webhook";
import { HttpFile } from "../http/http";

/**
 * A queued call has been dequeued and the actionUrl of the corresponding Enqueue action is being invoked. A PerCL response is expected.
 */

interface AttributeType {
  name: string;
  baseName: string;
  type: string;
  format: string;
  defaultValue: any;
}
interface ArgumentsType {
  requestType?: string;
  callId?: string;
  accountId?: string;
  from?: string;
  to?: string;
  callStatus?: CallStatus;
  direction?: CallDirection;
  conferenceId?: string;
  queueId?: string;
  queueResult?: string;
  queueTime?: number;
}
export class DequeueWebhook extends Webhook {
  /**
   * Context or reason why this request is being made. Will be dequeue - A queued call has been dequeued and the actionUrl of the corresponding Enqueue action is being invoked.
   */
  "requestType"?: string;
  /**
   * Unique ID for this Call, generated by FreeClimb.
   */
  "callId"?: string;
  /**
   * Account ID associated with your account.
   */
  "accountId"?: string;
  /**
   * Phone number of the party that initiated the Call (in E.164 format).
   */
  "from"?: string;
  /**
   * Phone number provisioned to you and to which this Call is directed (in E.164 format).
   */
  "to"?: string;
  "callStatus"?: CallStatus;
  "direction"?: CallDirection;
  /**
   * Unique ID of the Conference.
   */
  "conferenceId"?: string;
  /**
   * This is only populated if the request pertains to a Queue. Otherwise, it is set to null.
   */
  "queueId"?: string;
  /**
   * The final result of the enqueued Call. Valid values are: â€¢dequeued - Enqueued caller exited the Queue via a Dequeue action (Dequeue command or Queue Members POST REST API).
   */
  "queueResult"?: string;
  /**
   * Time (in seconds) the call spent in the Queue. This is only available if the Call was actually enqueued.
   */
  "queueTime"?: number;

  static readonly discriminator: string | undefined = "requestType";

  static readonly attributeTypeMap: AttributeType[] = [
    {
      name: "requestType",
      baseName: "requestType",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "callId",
      baseName: "callId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "accountId",
      baseName: "accountId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "from",
      baseName: "from",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "to",
      baseName: "to",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "callStatus",
      baseName: "callStatus",
      type: "CallStatus",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "direction",
      baseName: "direction",
      type: "CallDirection",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "conferenceId",
      baseName: "conferenceId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "queueId",
      baseName: "queueId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "queueResult",
      baseName: "queueResult",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "queueTime",
      baseName: "queueTime",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
  ];

  static getAttributeTypeMap(): AttributeType[] {
    return super.getAttributeTypeMap().concat(DequeueWebhook.attributeTypeMap);
  }
  public constructor(args: ArgumentsType) {
    super({ requestType: "dequeue" });
    const assign = <T>(attribute: keyof ArgumentsType): T => {
      return (args[attribute] ??
        DequeueWebhook.attributeTypeMap.find((attr) => attr.name === attribute)
          ?.defaultValue) as T;
    };
    if (args.hasOwnProperty("requestType")) {
      this["requestType"] = assign<string>("requestType");
    }
    if (args.hasOwnProperty("callId")) {
      this["callId"] = assign<string>("callId");
    }
    if (args.hasOwnProperty("accountId")) {
      this["accountId"] = assign<string>("accountId");
    }
    if (args.hasOwnProperty("from")) {
      this["from"] = assign<string>("from");
    }
    if (args.hasOwnProperty("to")) {
      this["to"] = assign<string>("to");
    }
    if (args.hasOwnProperty("callStatus")) {
      this["callStatus"] = assign<CallStatus>("callStatus");
    }
    if (args.hasOwnProperty("direction")) {
      this["direction"] = assign<CallDirection>("direction");
    }
    if (args.hasOwnProperty("conferenceId")) {
      this["conferenceId"] = assign<string>("conferenceId");
    }
    if (args.hasOwnProperty("queueId")) {
      this["queueId"] = assign<string>("queueId");
    }
    if (args.hasOwnProperty("queueResult")) {
      this["queueResult"] = assign<string>("queueResult");
    }
    if (args.hasOwnProperty("queueTime")) {
      this["queueTime"] = assign<number>("queueTime");
    }
  }
  public static deserialize(payload: string): DequeueWebhook {
    return new DequeueWebhook(JSON.parse(payload));
  }
}
