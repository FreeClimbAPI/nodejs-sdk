/**
 * FreeClimb API
 * FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@freeclimb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BargeInReason } from "./../models/BargeInReason";
import { RecordUtteranceTermReason } from "./../models/RecordUtteranceTermReason";
import { TranscribeReason } from "./../models/TranscribeReason";
import { TranscribeTermReason } from "./../models/TranscribeTermReason";
import { Webhook } from "./../models/Webhook";
import { HttpFile } from "../http/http";

interface AttributeType {
  name: string;
  baseName: string;
  type: string;
  format: string;
  defaultValue: any;
}
interface ArgumentsType {
  requestType?: string;
  accountId?: string;
  callId?: string;
  from?: string;
  to?: string;
  recordingId?: string;
  recordingUrl?: string;
  recordingSize?: number;
  recordingFormat?: string;
  recordingDurationMs?: number;
  termReason?: TranscribeTermReason;
  recordTermReason?: RecordUtteranceTermReason;
  digit?: string;
  privacyForLogging?: boolean;
  privacyForRecording?: boolean;
  bargeInReason?: BargeInReason;
  bargedInPromptNo?: number;
  bargedInPromptMs?: number;
  bargedInPromptLoopNo?: number;
  bargeInTimeMs?: number;
  transcript?: string;
  transcribeReason?: TranscribeReason;
  transcriptionDurationMs?: number;
}
export class TranscribeWebhook extends Webhook {
  /**
   * The context or reason why this request is being made. Will be transcribe - The TranscribeUtterance command has completed and its actionUrl is being invoked.
   */
  "requestType"?: string;
  /**
   * Account ID associated with your account.
   */
  "accountId"?: string;
  /**
   * Unique identifier for this Call, generated by FreeClimb
   */
  "callId"?: string;
  /**
   * Phone number of the party that initiated the Call (in E.164 format).
   */
  "from"?: string;
  /**
   * Phone number provisioned to the customer and to which this Call is directed (in E.164 format).
   */
  "to"?: string;
  /**
   * The ID of the recording. If no recording was made due to errors or the \'saveRecording\' flag being disabled this field will be set to null.
   */
  "recordingId"?: string;
  /**
   * The URL of the recorded audio file. This URL can be used as is in a Play command to play the recording (no authentication needed). It can also be used to download the recording file via the REST API.
   */
  "recordingUrl"?: string;
  /**
   * The size of the recording in bytes.
   */
  "recordingSize"?: number;
  /**
   * The media type of the recording.
   */
  "recordingFormat"?: string;
  /**
   * The duration of the recorded audio in milliseconds.
   */
  "recordingDurationMs"?: number;
  "termReason"?: TranscribeTermReason;
  "recordTermReason"?: RecordUtteranceTermReason;
  /**
   * If recordTermReason is digit, this will be the digit that was pressed. Otherwise it will be null.
   */
  "digit"?: string;
  /**
   * Echo back of the privacyForLogging flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
   */
  "privacyForLogging"?: boolean;
  /**
   * Echo back of the privacyForRecording flag as specified in the transcribe utterance command – confirmation of logging protection has been applied. Can be used by application to know it should also apply protection when handling this request.
   */
  "privacyForRecording"?: boolean;
  "bargeInReason"?: BargeInReason;
  "bargedInPromptNo"?: number;
  /**
   * duration in ms bargedInPromptNo prompt was executing until barge-in occurred.
   */
  "bargedInPromptMs"?: number;
  "bargedInPromptLoopNo"?: number;
  /**
   * epoch time in ms
   */
  "bargeInTimeMs"?: number;
  /**
   * Transcribed text of the recording. Can be empty or null. null means there was a failure in transcribing the audio, refer to transcribeReason for detailed failure reason.
   */
  "transcript"?: string;
  "transcribeReason"?: TranscribeReason;
  /**
   * The duration of the audio being transcribed in milliseconds
   */
  "transcriptionDurationMs"?: number;

  static readonly discriminator: string | undefined = "requestType";

  static readonly attributeTypeMap: AttributeType[] = [
    {
      name: "requestType",
      baseName: "requestType",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "accountId",
      baseName: "accountId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "callId",
      baseName: "callId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "from",
      baseName: "from",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "to",
      baseName: "to",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "recordingId",
      baseName: "recordingId",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "recordingUrl",
      baseName: "recordingUrl",
      type: "string",
      format: "uri",

      defaultValue: undefined,
    },
    {
      name: "recordingSize",
      baseName: "recordingSize",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "recordingFormat",
      baseName: "recordingFormat",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "recordingDurationMs",
      baseName: "recordingDurationMs",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "termReason",
      baseName: "termReason",
      type: "TranscribeTermReason",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "recordTermReason",
      baseName: "recordTermReason",
      type: "RecordUtteranceTermReason",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "digit",
      baseName: "digit",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "privacyForLogging",
      baseName: "privacyForLogging",
      type: "boolean",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "privacyForRecording",
      baseName: "privacyForRecording",
      type: "boolean",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "bargeInReason",
      baseName: "bargeInReason",
      type: "BargeInReason",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "bargedInPromptNo",
      baseName: "bargedInPromptNo",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "bargedInPromptMs",
      baseName: "bargedInPromptMs",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "bargedInPromptLoopNo",
      baseName: "bargedInPromptLoopNo",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "bargeInTimeMs",
      baseName: "bargeInTimeMs",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "transcript",
      baseName: "transcript",
      type: "string",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "transcribeReason",
      baseName: "transcribeReason",
      type: "TranscribeReason",
      format: "",

      defaultValue: undefined,
    },
    {
      name: "transcriptionDurationMs",
      baseName: "transcriptionDurationMs",
      type: "number",
      format: "",

      defaultValue: undefined,
    },
  ];

  static getAttributeTypeMap(): AttributeType[] {
    return super
      .getAttributeTypeMap()
      .concat(TranscribeWebhook.attributeTypeMap);
  }
  public constructor(args: ArgumentsType) {
    super({ requestType: "transcribe" });
    const assign = <T>(attribute: keyof ArgumentsType): T => {
      return (
        args.hasOwnProperty(attribute)
          ? args[attribute]
          : TranscribeWebhook.attributeTypeMap.find(
              (attr) => attr.name === attribute,
            )?.defaultValue
      ) as T;
    };
    this["requestType"] = assign<string>("requestType");
    this["accountId"] = assign<string>("accountId");
    this["callId"] = assign<string>("callId");
    this["from"] = assign<string>("from");
    this["to"] = assign<string>("to");
    this["recordingId"] = assign<string>("recordingId");
    this["recordingUrl"] = assign<string>("recordingUrl");
    this["recordingSize"] = assign<number>("recordingSize");
    this["recordingFormat"] = assign<string>("recordingFormat");
    this["recordingDurationMs"] = assign<number>("recordingDurationMs");
    this["termReason"] = assign<TranscribeTermReason>("termReason");
    this["recordTermReason"] =
      assign<RecordUtteranceTermReason>("recordTermReason");
    this["digit"] = assign<string>("digit");
    this["privacyForLogging"] = assign<boolean>("privacyForLogging");
    this["privacyForRecording"] = assign<boolean>("privacyForRecording");
    this["bargeInReason"] = assign<BargeInReason>("bargeInReason");
    this["bargedInPromptNo"] = assign<number>("bargedInPromptNo");
    this["bargedInPromptMs"] = assign<number>("bargedInPromptMs");
    this["bargedInPromptLoopNo"] = assign<number>("bargedInPromptLoopNo");
    this["bargeInTimeMs"] = assign<number>("bargeInTimeMs");
    this["transcript"] = assign<string>("transcript");
    this["transcribeReason"] = assign<TranscribeReason>("transcribeReason");
    this["transcriptionDurationMs"] = assign<number>("transcriptionDurationMs");
  }
  public static deserialize(payload: string): TranscribeWebhook {
    return new TranscribeWebhook(JSON.parse(payload));
  }
}
